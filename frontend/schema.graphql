schema {
  query: Query
}

"The node interface is implemented by entities that have a gloabl unique identifier."
interface Node {
  id: ID!
}

type Demand implements Node {
  createdAt: DateTime!
  id: ID!
  product: Product
  user: User
}

"A connection to a list of items."
type DemandConnection {
  "A list of edges."
  edges: [DemandEdge!]
  "A flattened list of the nodes."
  nodes: [Demand]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  totalCount: Int!
}

"An edge in a connection."
type DemandEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Demand
}

"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

type Product implements Node {
  id: ID!
  title: String
}

"A connection to a list of items."
type ProductConnection {
  "A list of edges."
  edges: [ProductEdge!]
  "A flattened list of the nodes."
  nodes: [Product]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  totalCount: Int!
}

"An edge in a connection."
type ProductEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Product
}

type Query {
  demands(after: String before: String first: PaginationAmount last: PaginationAmount order_by: DemandSort where: DemandFilter): DemandConnection
  node(id: ID!): Node
  products(after: String before: String first: PaginationAmount last: PaginationAmount order_by: ProductSort where: ProductFilter): ProductConnection
  users(after: String before: String first: PaginationAmount last: PaginationAmount order_by: UserSort where: UserFilter): UserConnection
}

type User implements Node {
  email: String
  firstName: String
  id: ID!
  surname: String
}

"A connection to a list of items."
type UserConnection {
  "A list of edges."
  edges: [UserEdge!]
  "A flattened list of the nodes."
  nodes: [User]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  totalCount: Int!
}

"An edge in a connection."
type UserEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: User
}

input DemandFilter {
  AND: [DemandFilter!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_gt: DateTime
  createdAt_not_gte: DateTime
  createdAt_not_in: [DateTime!]
  createdAt_not_lt: DateTime
  createdAt_not_lte: DateTime
  id: Uuid
  id_gt: Uuid
  id_gte: Uuid
  id_in: [Uuid!]
  id_lt: Uuid
  id_lte: Uuid
  id_not: Uuid
  id_not_gt: Uuid
  id_not_gte: Uuid
  id_not_in: [Uuid!]
  id_not_lt: Uuid
  id_not_lte: Uuid
  OR: [DemandFilter!]
}

input DemandSort {
  createdAt: SortOperationKind
  id: SortOperationKind
}

input ProductFilter {
  AND: [ProductFilter!]
  id: Uuid
  id_gt: Uuid
  id_gte: Uuid
  id_in: [Uuid!]
  id_lt: Uuid
  id_lte: Uuid
  id_not: Uuid
  id_not_gt: Uuid
  id_not_gte: Uuid
  id_not_in: [Uuid!]
  id_not_lt: Uuid
  id_not_lte: Uuid
  OR: [ProductFilter!]
  title: String
  title_contains: String
  title_ends_with: String
  title_in: [String]
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String]
  title_not_starts_with: String
  title_starts_with: String
}

input ProductSort {
  id: SortOperationKind
  title: SortOperationKind
}

input UserFilter {
  AND: [UserFilter!]
  email: String
  email_contains: String
  email_ends_with: String
  email_in: [String]
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String]
  email_not_starts_with: String
  email_starts_with: String
  firstName: String
  firstName_contains: String
  firstName_ends_with: String
  firstName_in: [String]
  firstName_not: String
  firstName_not_contains: String
  firstName_not_ends_with: String
  firstName_not_in: [String]
  firstName_not_starts_with: String
  firstName_starts_with: String
  id: Uuid
  id_gt: Uuid
  id_gte: Uuid
  id_in: [Uuid!]
  id_lt: Uuid
  id_lte: Uuid
  id_not: Uuid
  id_not_gt: Uuid
  id_not_gte: Uuid
  id_not_in: [Uuid!]
  id_not_lt: Uuid
  id_not_lte: Uuid
  OR: [UserFilter!]
  surname: String
  surname_contains: String
  surname_ends_with: String
  surname_in: [String]
  surname_not: String
  surname_not_contains: String
  surname_not_ends_with: String
  surname_not_in: [String]
  surname_not_starts_with: String
  surname_starts_with: String
}

input UserSort {
  email: SortOperationKind
  firstName: SortOperationKind
  id: SortOperationKind
  surname: SortOperationKind
}

enum SortOperationKind {
  ASC
  DESC
}

"The `Boolean` scalar type represents `true` or `false`."
scalar Boolean

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID."
scalar ID

"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."
scalar Int

scalar PaginationAmount

"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."
scalar String

scalar Uuid